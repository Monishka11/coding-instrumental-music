{"ast":null,"code":"var _jsxFileName = \"/home/monishka/ppl-projects/music-player-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\"; //Import Components\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\"; //Import data\n\nimport chillhop from \"./data\"; //Util\n\nimport { playAudio } from \"./util\";\n\nfunction App() {\n  _s();\n\n  //Ref\n  const audioRef = useRef(null);\n  const [songs, setSongs] = useState(chillhop());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n    volume: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const percentage = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration: duration,\n      animationPercentage: percentage,\n      volume: e.target.volume\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    playAudio(isPlaying, audioRef);\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `App ${libraryStatus ? \"library-active\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    libraryStatus: libraryStatus,\n    setLibraryStatus: setLibraryStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Song, {\n    isPlaying: isPlaying,\n    currentSong: currentSong,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Player, {\n    audioRef: audioRef,\n    setIsPlaying: setIsPlaying,\n    currentSong: currentSong,\n    isPlaying: isPlaying,\n    songInfo: songInfo,\n    setSongInfo: setSongInfo,\n    songs: songs,\n    setSongs: setSongs,\n    setCurrentSong: setCurrentSong,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Library, {\n    songs: songs,\n    setCurrentSong: setCurrentSong,\n    audioRef: audioRef,\n    isPlaying: isPlaying,\n    setSongs: setSongs,\n    libraryStatus: libraryStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"audio\", {\n    onLoadedMetadata: timeUpdateHandler,\n    onTimeUpdate: timeUpdateHandler,\n    ref: audioRef,\n    src: currentSong.audio,\n    onEnded: songEndHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(App, \"2Tp3r+CdszrNKOMmxlsZS648NtI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/monishka/ppl-projects/music-player-react/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","chillhop","playAudio","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","volume","libraryStatus","setLibraryStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","percentage","songEndHandler","currentIndex","findIndex","song","id","length","audio"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\";\n\n//Import Components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n\n//Import data\nimport chillhop from \"./data\";\n\n//Util\nimport { playAudio } from \"./util\";\n\nfunction App() {\n  //Ref\n  const audioRef = useRef(null);\n\n  const [songs, setSongs] = useState(chillhop());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n    volume: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const percentage = Math.round((roundedCurrent / roundedDuration) * 100);\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration: duration,\n      animationPercentage: percentage,\n      volume: e.target.volume,\n    });\n  };\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    playAudio(isPlaying, audioRef);\n    return;\n  };\n  return (\n    <div className={`App ${libraryStatus ? \"library-active\" : \"\"}`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song isPlaying={isPlaying} currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        isPlaying={isPlaying}\n        songInfo={songInfo}\n        setSongInfo={setSongInfo}\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n      />\n      <Library\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onLoadedMetadata={timeUpdateHandler}\n        onTimeUpdate={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n       \n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}