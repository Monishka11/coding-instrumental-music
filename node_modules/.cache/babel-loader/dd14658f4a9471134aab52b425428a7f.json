{"ast":null,"code":"var _jsxFileName = \"/home/monishka/ppl-projects/music-player-react/src/components/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause, faVolumeDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { playAudio } from \"../util\";\n\nconst Player = ({\n  isPlaying,\n  setIsPlaying,\n  audioRef,\n  songInfo,\n  setSongInfo,\n  currentSong,\n  songs,\n  setCurrentSong,\n  setSongs\n}) => {\n  _s();\n\n  const [activeVolume, setActiveVolume] = useState(false); //UseEffect Update List\n\n  const activeLibraryHandler = nextPrev => {\n    const newSongs = songs.map(song => {\n      if (song.id === nextPrev.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n  };\n\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`\n  }; //Event Handlers\n\n  function getTime(time) {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n  };\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const skipTrackHandler = async direction => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id); //Forward BAck\n\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.length === -1) {\n        await setCurrentSong(songs[songs.length - 1]);\n        activeLibraryHandler(songs[songs.length - 1]);\n        playAudio(isPlaying, audioRef);\n        return;\n      }\n\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\n    }\n\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const changeVolume = e => {\n    let value = e.target.value;\n    audioRef.current.volume = value;\n    setSongInfo({ ...songInfo,\n      volume: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, getTime(songInfo.currentTime)), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`\n    },\n    className: \"track\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: songInfo.currentTime,\n    type: \"range\",\n    max: songInfo.duration || 0,\n    min: 0,\n    onChange: dragHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: trackAnim,\n    className: \"animate-track\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, songInfo.duration ? getTime(songInfo.duration) : \"0:00\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"play-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    onClick: () => skipTrackHandler(\"skip-back\"),\n    className: \"skip-back\",\n    size: \"2x\",\n    icon: faAngleLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    onClick: playSongHandler,\n    className: \"play\",\n    size: \"2x\",\n    icon: isPlaying ? faPause : faPlay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"skip-forward\",\n    size: \"2x\",\n    icon: faAngleRight,\n    onClick: () => skipTrackHandler(\"skip-forward\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    onClick: () => setActiveVolume(!activeVolume),\n    icon: faVolumeDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }), activeVolume && /*#__PURE__*/React.createElement(\"input\", {\n    onChange: changeVolume,\n    value: songInfo.volume,\n    max: \"1\",\n    min: \"0\",\n    step: \"0.01\",\n    type: \"range\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(Player, \"a5lsJ61FHaxhIE71hpmZSeqVqsw=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/home/monishka/ppl-projects/music-player-react/src/components/Player.js"],"names":["React","useState","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","faVolumeDown","playAudio","Player","isPlaying","setIsPlaying","audioRef","songInfo","setSongInfo","currentSong","songs","setCurrentSong","setSongs","activeVolume","setActiveVolume","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","trackAnim","transform","animationPercentage","getTime","time","Math","floor","slice","dragHandler","e","current","currentTime","target","value","playSongHandler","pause","play","skipTrackHandler","direction","currentIndex","findIndex","length","changeVolume","volume","background","color","duration"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n  faVolumeDown,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { playAudio } from \"../util\";\n\nconst Player = ({\n  isPlaying,\n  setIsPlaying,\n  audioRef,\n  songInfo,\n  setSongInfo,\n  currentSong,\n  songs,\n  setCurrentSong,\n  setSongs,\n}) => {\n  const [activeVolume, setActiveVolume] = useState(false);\n  //UseEffect Update List\n  const activeLibraryHandler = (nextPrev) => {\n    const newSongs = songs.map((song) => {\n      if (song.id === nextPrev.id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    setSongs(newSongs);\n  };\n\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`,\n  };\n  //Event Handlers\n  function getTime(time) {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  }\n  const dragHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n  const skipTrackHandler = async (direction) => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n\n    //Forward BAck\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.length === -1) {\n        await setCurrentSong(songs[songs.length - 1]);\n        activeLibraryHandler(songs[songs.length - 1]);\n        playAudio(isPlaying, audioRef);\n        return;\n      }\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\n    }\n    if (isPlaying) audioRef.current.play();\n  };\n  const changeVolume = (e) => {\n    let value = e.target.value;\n    audioRef.current.volume = value;\n    setSongInfo({ ...songInfo, volume: value });\n  };\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <div\n          style={{\n            background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`,\n          }}\n          className=\"track\"\n        >\n          <input\n            value={songInfo.currentTime}\n            type=\"range\"\n            max={songInfo.duration || 0}\n            min={0}\n            onChange={dragHandler}\n          />\n          <div style={trackAnim} className=\"animate-track\"></div>\n        </div>\n        <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-back\")}\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n        />\n        <FontAwesomeIcon\n          onClick={() => setActiveVolume(!activeVolume)}\n          icon={faVolumeDown}\n        />\n        {activeVolume && (\n          <input\n            onChange={changeVolume}\n            value={songInfo.volume}\n            max=\"1\"\n            min=\"0\"\n            step=\"0.01\"\n            type=\"range\"\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}